diff --git a/apostrophe/application.py b/apostrophe/application.py
index 72281b7..f9a35d6 100644
--- a/apostrophe/application.py
+++ b/apostrophe/application.py
@@ -15,7 +15,8 @@ import gi
 from apostrophe.main_window import MainWindow
 
 gi.require_version('Gtk', '3.0')
-from gi.repository import GLib, Gio, Gtk
+gi.require_version('Handy', '1')
+from gi.repository import GLib, Gio, Gtk, Handy
 
 from apostrophe.settings import Settings
 from apostrophe.helpers import set_up_logging
@@ -32,6 +33,8 @@ class Application(Gtk.Application):
         self.add_main_option("verbose", b"v", GLib.OptionFlags.NONE,
                              GLib.OptionArg.NONE, "Verbose output", None)
 
+        Handy.init()
+
         self.window = None
         self.settings = Settings.new()
         self._application_id = application_id
diff --git a/apostrophe/export_dialog.py b/apostrophe/export_dialog.py
index 361d0a5..ffe8286 100644
--- a/apostrophe/export_dialog.py
+++ b/apostrophe/export_dialog.py
@@ -17,14 +17,19 @@
 """
 
 
+from dataclasses import dataclass
 import logging
 import os
 from gettext import gettext as _
 
 import gi
+from enum import Enum
 
 gi.require_version('Gtk', '3.0')
-from gi.repository import Gtk, GLib
+from gi.repository import Gtk, GLib, Gio, GObject
+gi.require_version('Handy', '1')
+from gi.repository import Handy
+
 
 from apostrophe import helpers
 from apostrophe.theme import Theme
@@ -41,7 +46,7 @@ class Export:
 
     formats = [
         {
-            "name": "LaTeX (pdf)",
+            "name": "PDF",
             "ext": "pdf",
             "to": "pdf"
         },
@@ -71,29 +76,14 @@ class Export:
             "to": "html"
         },
         {
-            "name": "HTML and JavaScript Slideshow (Slidy)",
-            "ext": "html",
-            "to": "slidy"
-        },
-        {
-            "name": "HTML and JavaScript Slideshow (Slideous)",
-            "ext": "html",
-            "to": "slideous"
-        },
-        {
-            "name": "HTML5 and JavaScript Slideshow (DZSlides)",
-            "ext": "html",
-            "to": "dzslides"
-        },
-        {
-            "name": "HTML5 and JavaScript Slideshow (reveal.js)",
+            "name": "HTML5 Slideshow (reveal.js)",
             "ext": "html",
             "to": "revealjs"
         },
         {
-            "name": "HTML and JavaScript Slideshow (S5)",
+            "name": "HTML5 Slideshow (DZSlides)",
             "ext": "html",
-            "to": "s5"
+            "to": "dzslides"
         },
         {
             "name": "Textile",
@@ -147,7 +137,7 @@ class Export:
         }
     ]
 
-    def __init__(self, filename, export_format, text):
+    def __init__(self, file, export_format, text):
         """Set up the export dialog"""
 
         self.export_menu = {
@@ -181,28 +171,28 @@ class Export:
             }
         }
 
-        self.filename = filename or _("Untitled document.md")
+        self.file = file
         self.export_format = export_format
 
         self.dialog = self.export_menu[export_format]["dialog"]()
+        #self.dialog2 = Export2()
+        self.dialog3 = Export3()
+
+        #self.dialog3.show_all()
+        self.dialog3.destroy()
 
-        response = self.dialog.run()
-
-        if response == Gtk.ResponseType.ACCEPT:
-            try:
-                self.export(export_format, text)
-            except (NotADirectoryError, RuntimeError) as e:
-                dialog = Gtk.MessageDialog(None,
-                                       Gtk.DialogFlags.MODAL | Gtk.DialogFlags.DESTROY_WITH_PARENT,
-                                       Gtk.MessageType.ERROR,
-                                       Gtk.ButtonsType.CLOSE,
-                                       _("An error happened while trying to export:\n\n{err_msg}")
-                                           .format(err_msg= str(e).encode().decode("unicode-escape"))
-                                       )
-                dialog.run()
-                dialog.destroy()
-        
-        self.dialog.destroy()
+        #response = self.dialog.run()
+
+        #if response == Gtk.ResponseType.ACCEPT:
+        #    try:
+        #        self.export(export_format, text)
+        #    except (NotADirectoryError, RuntimeError) as e:
+        #        helpers.show_error(
+        #            None,
+        #            _("An error happened while trying to export:\n\n{err_msg}")
+        #            .format(err_msg=str(e).encode().decode("unicode-escape")))
+
+        #self.dialog.destroy()
 
     def regular_export_dialog(self):
         texlive_installed = helpers.exist_executable("pdftex")
@@ -230,8 +220,8 @@ class Export:
             dialog_filter.add_mime_type(self.export_menu[self.export_format]["mimetype"])
             dialog.add_filter(dialog_filter)
             dialog.set_do_overwrite_confirmation(True)
-            dialog.set_current_folder(os.path.dirname(self.filename))
-            dialog.set_current_name(os.path.basename(self.filename)[:-2] +
+            dialog.set_current_folder(self.file.get_parent().get_path())
+            dialog.set_current_name(self.file.title[:-2] +
                                     self.export_menu[self.export_format]["extension"])
 
         return dialog
@@ -260,7 +250,7 @@ class Export:
         self.adv_export_folder = self.builder.get_object("advanced")
 
         self.adv_export_name = self.builder.get_object("advanced_export_name")
-        self.adv_export_name.set_text(os.path.basename(self.filename)[:-3])
+        self.adv_export_name.set_text(self.file.title[:-3])
         self.paper_size = self.builder.get_object("combobox_paper_size")
 
         return self.builder.get_object("Export")
@@ -304,6 +294,7 @@ class Export:
             if filename.endswith("." + export_type):
                 filename = filename[:-len(export_type)-1]
             output_dir = os.path.abspath(os.path.join(filename, os.path.pardir))
+            print(output_dir)
             basename = os.path.basename(filename)
 
             to = export_type
@@ -417,6 +408,132 @@ class Export:
 
         return paper_formats[paper_size]
 
+
+@dataclass
+class Format:
+
+    name: str
+    ext: str
+    to: str
+
+    @property
+    def has_pages(self):
+        return self.to in {"pdf", "latex", "context", "odt", "docx"}
+
+    @property
+    def is_html(self):
+        return self.ext == "html"
+
+    @property
+    def has_syntax(self):
+        return self.ext in {"html", "tex", "docx", "pdf"}
+
+    @property
+    def is_presentation(self):
+        return self.to == "beamer"
+
+class ExportDialog:
+    
+
+@Gtk.Template(resource_path='/org/gnome/gitlab/somas/Apostrophe/ui/Export3.ui')
+class Export3(Handy.Window):
+
+    __gtype_name__ = "Export3"
+
+    headerbar = Gtk.Template.Child()
+
+    formats_list = Gtk.Template.Child()
+
+    leaflet = Gtk.Template.Child()
+    options_page = Gtk.Template.Child()
+    formats_page = Gtk.Template.Child()
+    go_previous_button = Gtk.Template.Child()
+    go_previous_revealer = Gtk.Template.Child()
+
+    cmb_page_size = Gtk.Template.Child()
+    cmb_syntax_highlighting = Gtk.Template.Child()
+    page_options = Gtk.Template.Child()
+    html_options = Gtk.Template.Child()
+    syntax_options = Gtk.Template.Child()
+    beamer_options = Gtk.Template.Child()
+
+    formats = [Format(**format) for format in Export.formats]
+
+    page_sizes = ['A4', 'Letter']
+    syntax_styles = ['pygments',
+                     'kate',
+                     'monochrome',
+                     'espresso',
+                     'zenburn',
+                     'haddock',
+                     'tango']
+
+    
+
+    def __init__(self, **kwargs):
+        super().__init__(**kwargs)
+
+
+        for i, format in enumerate(Export.formats):
+
+            row = Handy.ActionRow.new()
+            row.set_title(format["name"])
+            self.formats_list.insert(row, i)
+
+        self.formats_list.show_all()
+
+        page_sizes_list = helpers.liststore_from_list(self.page_sizes)
+        self.cmb_page_size.bind_name_model(page_sizes_list,
+                                           self.get_hdy_name, None, None)
+
+        syntax_styles_list = helpers.liststore_from_list(self.syntax_styles)
+        self.cmb_syntax_highlighting.bind_name_model(syntax_styles_list,
+                                                     self.get_hdy_name,
+                                                     None, None)
+
+    def get_hdy_name(self, item, user_data, user_data_free):
+        return item.dup_string()
+
+    @Gtk.Template.Callback()
+    def reveal_go_back(self, widget, *args):
+        folded = self.leaflet.props.folded
+        on_options_page = (self.leaflet.get_visible_child() == self.options_page)
+        self.go_previous_revealer.set_reveal_child(folded and on_options_page)
+
+    @Gtk.Template.Callback()
+    def go_back(self, widget):
+        self.leaflet.set_visible_child(self.formats_page)
+
+    @Gtk.Template.Callback()
+    def on_format_selected(self, widget, row):
+        self.leaflet.set_visible_child(self.options_page)
+
+        index = row.get_index()
+        format = self.formats[index]
+
+        self.page_options.set_reveal_child(format.has_pages)
+        self.html_options.set_reveal_child(format.is_html)
+        self.syntax_options.set_reveal_child(format.has_syntax)
+        self.beamer_options.set_reveal_child(format.is_presentation)
+
+        self.headerbar.set_title(_("Export to {}").format(format.name))
+
+    @Gtk.Template.Callback()
+    def on_destroy(self, widget):
+        self.destroy()
+
+    @Gtk.Template.Callback()
+    def export(self, widget):
+        export_dialeg = dialog = Gtk.FileChooserNative.new(_("Export"),
+                                                None,
+                                                Gtk.FileChooserAction.SAVE,
+                                                _("Export to something") ,
+                                                _("Cancel"))
+        export_dialeg.set_transient_for(self)
+        export_dialeg.run()
+        export_dialeg.destroy()
+
+
 def disabled_text():
     """Return the TexLive installation instructions
 
diff --git a/apostrophe/helpers.py b/apostrophe/helpers.py
index 3d34269..915edb7 100644
--- a/apostrophe/helpers.py
+++ b/apostrophe/helpers.py
@@ -22,6 +22,8 @@ import os
 import shutil
 from contextlib import contextmanager
 
+from typing import List
+
 from gettext import gettext as _
 
 import gi
@@ -29,56 +31,21 @@ import pypandoc
 from gi.overrides.Pango import Pango
 
 from apostrophe.settings import Settings
+import sys
+from apostrophe import config
 
 gi.require_version('Gtk', '3.0')
-from gi.repository import Gtk  # pylint: disable=E0611
-
-from apostrophe.builder import Builder
+gi.require_version('Handy', '1')
+from gi.repository import Gtk, Gio, Handy  # pylint: disable=E0611
 
 __apostrophe_data_directory__ = '../data/'
 
-
 @contextmanager
 def user_action(text_buffer):
     text_buffer.begin_user_action()
     yield text_buffer
     text_buffer.end_user_action()
 
-def get_data_file(*path_segments):
-    """Get the full path to a data file.
-
-    Returns the path to a file underneath the data directory (as defined by
-    `get_data_path`). Equivalent to os.path.join(get_data_path(),
-    *path_segments).
-    """
-    return os.path.join(get_data_path(), *path_segments)
-
-
-def get_data_path():
-    """Retrieve apostrophe data path
-
-    This path is by default <apostrophe_path>/../data/ in trunk
-    and /opt/apostrophe/data in an installed version but this path
-    is specified at installation time.
-    """
-
-    # Get pathname absolute or relative.
-    if os.path.isfile("/.flatpak-info"):
-        return '/app/share/apostrophe/'
-
-    path = os.path.join(
-        os.path.dirname(__file__), __apostrophe_data_directory__)
-
-    # We try first if the data exists in the local folder and then
-    # in the system installation path
-    abs_data_path = os.path.abspath(path)
-    if not os.path.exists(abs_data_path):
-        abs_data_path = '/usr/share/apostrophe/'
-    elif not os.path.exists(abs_data_path):
-        raise ProjectPathNotFound
-
-    return abs_data_path
-
 
 def path_to_file(path):
     """Return a file path (file:///) for the given path"""
@@ -86,36 +53,20 @@ def path_to_file(path):
     return "file://" + path
 
 
-def get_media_file(media_file_path):
-    """Return the full path of a given filename under the media dir
-       (starts with file:///)
-    """
-
-    return path_to_file(get_media_path(media_file_path))
-
-
-def get_media_path(media_file_name):
-    """Return the full path of a given filename under the media dir
-       (doesn't start with file:///)
-    """
-
-    media_path = get_data_file('media', '%s' % (media_file_name,))
-    if not os.path.exists(media_path):
-        media_path = None
-    return media_path
-
-
 def get_css_path(css_file_name):
     """Return the full path of a given filename under the css dir
        (doesn't start with file:///)
     """
-    return get_media_path("css/{}".format(css_file_name))
+    css_path = "{}/media/css/{}".format(config.PKGDATA_DIR, css_file_name)
+    if not os.path.exists(css_path):
+        css_path = None
+    return css_path
 
 
 def get_script_path(script_file_name):
     """Return the full path of a given filename under the script dir
     """
-    script_path = get_data_file('lua', '%s' % (script_file_name,))
+    script_path = "{}/lua/{}".format(config.PKGDATA_DIR, script_file_name)
     if not os.path.exists(script_path):
         script_path = None
     return script_path
@@ -124,7 +75,7 @@ def get_script_path(script_file_name):
 def get_reference_files_path(reference_file_name):
     """Return the full path of a given filename under the reference_files dir
     """
-    refs_path = get_data_file('reference_files', '%s' % (reference_file_name,))
+    refs_path = "{}/reference_files/{}".format(config.PKGDATA_DIR, reference_file_name)
     if not os.path.exists(refs_path):
         refs_path = ""
     return refs_path
@@ -154,18 +105,20 @@ def set_up_logging(level):
         logger.setLevel(logging.DEBUG)
         logger.debug('logging enabled')
 
+
 def show_error(parent, message):
     dialog = Gtk.MessageDialog(parent,
                         Gtk.DialogFlags.MODAL | Gtk.DialogFlags.DESTROY_WITH_PARENT,
-                        Gtk.MessageType.WARNING,
+                        Gtk.MessageType.ERROR,
                         Gtk.ButtonsType.CLOSE,
                         message
                         )
-                        
+
     dialog.set_title(_("Error"))
     dialog.run()
     dialog.destroy()
 
+
 def get_help_uri(page=None):
     # help_uri from source tree - default language
     here = os.path.dirname(__file__)
@@ -182,30 +135,12 @@ def get_help_uri(page=None):
     return help_uri
 
 
-def show_uri(parent, link):
-    screen = parent.get_screen()
-    Gtk.show_uri(screen, link, Gtk.get_current_event_time())
-
-
-def alias(alternative_function_name):
-    '''see http://www.drdobbs.com/web-development/184406073#l9'''
-
-    def decorator(function):
-        '''attach alternative_function_name(s) to function'''
-        if not hasattr(function, 'aliases'):
-            function.aliases = []
-        function.aliases.append(alternative_function_name)
-        return function
-
-    return decorator
-
-
 def exist_executable(command):
     """return if a command can be executed in the SO
 
     Arguments:
         command {str} -- a command
-    
+
     Returns:
         {bool} -- if the given command exists in the system
     """
@@ -243,6 +178,25 @@ def get_descendant(widget, child_name, level, doPrint=False):
                 if found: return found
 
 
+def liststore_from_list(str_list: List[str]):
+    """return a Gtk.ListStore object of Handy.TypeValues
+       constructed after a list of strings
+
+        Arguments:
+            str_list {List[str]} -- a list of strings
+
+        Returns:
+            {Gtk.ListStore} -- a ListStore of Handy.ValueObjects
+    """
+
+    list_store = Gio.ListStore.new(Handy.ValueObject)
+
+    for element in str_list:
+        obj = Handy.ValueObject.new(element)
+        list_store.append(obj)
+
+    return list_store
+
 def get_char_width(widget):
     return Pango.units_to_double(
         widget.get_pango_context().get_metrics().get_approximate_char_width())
diff --git a/apostrophe/main_window.py b/apostrophe/main_window.py
index 87113c0..70fcc4f 100644
--- a/apostrophe/main_window.py
+++ b/apostrophe/main_window.py
@@ -311,7 +311,12 @@ class MainWindow(StyledWindow):
         filechooser.set_do_overwrite_confirmation(True)
         filechooser.set_local_only(False)
         filechooser.add_filter(filefilter)
-        filechooser.set_filename(self.current.title)
+
+        title = self.current.title
+        if not title.endswith(".md"):
+            title += ".md"
+        filechooser.set_current_name(title)
+
         response = filechooser.run()
 
         if response == Gtk.ResponseType.ACCEPT:
@@ -326,20 +331,6 @@ class MainWindow(StyledWindow):
                     LOGGER.warning(str(error.message))
                     return
 
-            filename = file.query_info(
-                         "standard",
-                         Gio.FileQueryInfoFlags.NONE,
-                         None).get_attribute_as_string(
-                         "standard::display-name")
-            if filename[-3:] != ".md":
-                filename += ".md"
-            try:
-                file = file.set_display_name(filename)
-            except GLib.GError as error:
-                if not error.matches(Gio.io_error_quark(),
-                                     Gio.IOErrorEnum.EXISTS):
-                    raise error
-
             self.current.gfile = file
 
             self.update_headerbar_title(False, True)
@@ -364,6 +355,9 @@ class MainWindow(StyledWindow):
             return
 
         if success:
+            recents_manager = Gtk.RecentManager.get_default()
+            recents_manager.add_item(self.current.gfile.get_uri())
+
             self.progressbar_initiate_tw.stop()
             self.progressbar_finalize_tw.start()
             self.progressbar_opacity_tw.start()
@@ -548,7 +542,9 @@ class MainWindow(StyledWindow):
         """
         text = bytes(self.text_view.get_text(), "utf-8")
 
-        Export(self.filename, export_format, text)
+        export_dialog = Export(self.current, export_format, text)
+        export_dialog.dialog3.set_transient_for(self)
+        export_dialog.dialog3.show_all()
 
     def focus_out(self, _widget, _data=None):
         """events called when the window losses focus
diff --git a/build-aux/flatpak/flatpak_texlive.json b/build-aux/flatpak/flatpak_texlive.json
deleted file mode 100644
index 00cab7f..0000000
--- a/build-aux/flatpak/flatpak_texlive.json
+++ /dev/null
@@ -1,66 +0,0 @@
-{
-    "id": "org.gnome.gitlab.somas.Apostrophe.Plugin.TexLive",
-    "runtime": "org.gnome.gitlab.somas.Apostrophe",
-    "branch": "stable",
-    "sdk": "org.gnome.Sdk//3.34",
-    "build-extension": true,
-    "separate-locales": false,
-    "appstream-compose": false,
-    "finish-args": [
-        ],
-    "build-options" : {
-        "prefix": "/app/extensions/TexLive",
-        "cflags": "-O2 -g",
-        "cxxflags": "-O2 -g",
-        "env": {
-          "PATH": "/app/extensions/TexLive/bin:/app/extensions/TexLive/2019/bin/x86_64-linux:/app/bin:/usr/bin"
-        }
-    },
-    "cleanup": ["/bin/wget"],
-    "modules": [
-        {
-            "name": "wget",
-            "builddir": true,
-            "config-opts": ["--prefix=/app/extensions/TexLive"],
-            "sources": [
-                {
-                    "type": "archive",
-                    "url": "https://ftp.gnu.org/gnu/wget/wget-1.19.4.tar.gz",
-                    "sha256": "93fb96b0f48a20ff5be0d9d9d3c4a986b469cb853131f9d5fe4cc9cecbc8b5b5"
-                }
-            ]
-        },
-        {
-            "name": "texlive",
-            "builddir": false,
-            "build-options" : {
-                "build-args": ["--share=network"],
-                "config-opts": ["--prefix=/app/extensions/TexLive"]
-            },
-            "build-commands": [
-            ],
-            "sources": [
-                {
-                    "type": "file",
-                    "path": "texlive_install.sh",
-                    "dest-filename": "configure"
-                }
-            ]
-        },
-        {
-            "name": "appdata",
-            "buildsystem": "simple",
-            "build-commands": [
-                "mkdir -p /app/extensions/TexLive/share/appdata",
-                "install -Dm644 org.gnome.gitlab.somas.Apostrophe.Plugin.TexLive.appdata.xml /app/extensions/TexLive/share/appdata/org.gnome.gitlab.somas.Apostrophe.Plugin.TexLive.appdata.xml",
-                "appstream-compose --basename=org.gnome.gitlab.somas.Apostrophe.Plugin.TexLive --prefix=/app/extensions/TexLive --origin=flatpak org.gnome.gitlab.somas.Apostrophe.Plugin.TexLive"
-            ],
-            "sources": [
-                {
-                    "type": "file",
-                    "path": "org.gnome.gitlab.somas.Apostrophe.Plugin.TexLive.appdata.xml"
-                }
-            ]
-        }
-    ]
-}
diff --git a/build-aux/flatpak/org.gnome.gitlab.somas.Apostrophe.json b/build-aux/flatpak/org.gnome.gitlab.somas.Apostrophe.json
index 5c26e08..07c15bb 100644
--- a/build-aux/flatpak/org.gnome.gitlab.somas.Apostrophe.json
+++ b/build-aux/flatpak/org.gnome.gitlab.somas.Apostrophe.json
@@ -9,8 +9,8 @@
         "--socket=wayland",
         "--share=ipc",
         "--share=network",
-        "--filesystem=host",
-        "--env=PATH=/app/bin:/usr/bin:/app/extensions/TexLive/2019/bin/x86_64-linux/",
+        "--filesystem=home:ro",
+        "--env=PATH=/app/bin:/usr/bin:/app/extensions/TexLive/2018/bin/x86_64-linux/",
         "--metadata=X-DConf=migrate-path=/org/gnome/gitlab/somas/Apostrophe/"
     ],
     "add-extensions" : {
diff --git a/build-aux/flatpak/org.gnome.gitlab.somas.Apostrophe.pipdeps.json b/build-aux/flatpak/org.gnome.gitlab.somas.Apostrophe.pipdeps.json
deleted file mode 100644
index 6fb15b7..0000000
--- a/build-aux/flatpak/org.gnome.gitlab.somas.Apostrophe.pipdeps.json
+++ /dev/null
@@ -1,35 +0,0 @@
-
-        {
-            "name": "pipdeps",
-            "buildsystem": "simple",
-            "build-commands": [
-                "pip3 install --no-index --find-links=\"file://${PWD}\" --prefix=${FLATPAK_DEST} pyenchant regex pypandoc"
-              ],
-            "sources": [
-                  {
-                    "type": "file",
-                    "url": "https://files.pythonhosted.org/packages/5d/c1/45947333669b31bc6b4933308dd07c2aa2fedcec0a95b14eedae993bd449/wheel-0.31.0.tar.gz",
-                    "sha256": "1ae8153bed701cb062913b72429bcf854ba824f973735427681882a688cb55ce"
-                  },
-                  {
-                    "type": "file",
-                    "url": "https://files.pythonhosted.org/packages/ae/e8/2340d46ecadb1692a1e455f13f75e596d4eab3d11a57446f08259dee8f02/pip-10.0.1.tar.gz",
-                    "sha256": "f2bd08e0cd1b06e10218feaf6fef299f473ba706582eb3bd9d52203fdbd7ee68"
-                  },
-                  {
-                    "type": "file",
-                    "url": "https://files.pythonhosted.org/packages/71/81/00184643e5a10a456b4118fc12c96780823adb8ed974eb2289f29703b29b/pypandoc-1.4.tar.gz",
-                    "sha256": "e914e6d5f84a76764887e4d909b09d63308725f0cbb5293872c2c92f07c11a5b"
-                  },
-                  {
-                    "type": "file",
-                    "url": "https://files.pythonhosted.org/packages/a2/51/c39562cfed3272592c60cfd229e5464d715b78537e332eac2b695422dc49/regex-2018.02.21.tar.gz",
-                    "sha256": "b44624a38d07d3c954c84ad302c29f7930f4bf01443beef5589e9157b14e2a29"
-                  },
-                  {
-                    "type": "file",
-                    "url": "https://files.pythonhosted.org/packages/9e/54/04d88a59efa33fefb88133ceb638cdf754319030c28aadc5a379d82140ed/pyenchant-2.0.0.tar.gz",
-                    "sha256": "fc31cda72ace001da8fe5d42f11c26e514a91fa8c70468739216ddd8de64e2a0"
-                  }
-              ]
-          }
diff --git a/data/apostrophe.gresource.xml b/data/apostrophe.gresource.xml
index 77219f7..b665a69 100644
--- a/data/apostrophe.gresource.xml
+++ b/data/apostrophe.gresource.xml
@@ -7,6 +7,8 @@
     <file compressed="true" alias="icons/preview-layout-half-height-symbolic.svg">media/icons/preview-layout-half-height-symbolic.svg</file>
     <file compressed="true">media/css/gtk/base.css</file>
     <file compressed="true" preprocess="xml-stripblanks">ui/Export.ui</file>
+    <file compressed="true" preprocess="xml-stripblanks">ui/Export2.ui</file>
+    <file compressed="true" preprocess="xml-stripblanks">ui/Export3.ui</file>
     <file compressed="true" preprocess="xml-stripblanks">ui/ExportPopover.ui</file>
     <file compressed="true" preprocess="xml-stripblanks">ui/Menu.ui</file>
     <file compressed="true" preprocess="xml-stripblanks">ui/Preferences.ui</file>
